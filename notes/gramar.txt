program : (expr ("\n"? expr)*)?

expr : logic
     | func
     | if_else
     | ret
     | declr

ret : "return" expr

if_else : "if" logic "{" "\n"? program }"
          ("\n"? "else" "{" "\n"? program "}")?

arg : IDENT ":" type
func : "def" IDENT "(" (arg ("," arg)*)? ")" arrow type "{" "\n"? program "}"
arrow : "->"|"→"

type : IDENT
     | "fn" (type ("," type)*)? type
     | "(" type ")" // vet inte om jag gör den här

logic : comp ("and" logic)*
      | comp ("or" logic)*

comp : math ("==" comp)*
     | math ("!=" comp)*
     | math ("<=" comp)*
     | math (">=" comp)*
     | math ("<" comp)*
     | math (">" comp)*

math : term ("+" math)*
     | term ("-" math)*

term : factor ("*" term)*
     | factor ("/" term)*

factor : value POWER | value
value : INT 
      | FLOAT 
      | IDENT 
      | STRING 
      | "(" expr ")" 
      | "-" value 
      | "true" 
      | "false" 
      | "not" value
      | call
      | IDENT "=" expr
      | value indexing

indexing : "[" expr "]"

call : value "(" args? ")" ((arg ("," arg)*)? arrow type "{" program "}")?
args : expr ("," expr)*


declr : "let" IDENT "=" expr
